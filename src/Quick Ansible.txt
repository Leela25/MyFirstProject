ansible:
   - Configuration management tool
   - It's Python based tool
   - There are no agents in this ansible
   - Control Manager and nodes
   - ssh based
   - /etc/ansible/hosts : Here u can group ur hosts, like all webservers in one group, all DB servers in one group etc
    example: [test-servers]
              10.0.0.1
              10.0.0.2
             [webservers]
              172.0.255.1
  - To make connection between control machine and ansible hosts, you need to add ssh keys
  - ansible -m ping 'test-servers' : To check test-servers connection is working or not
  - pip is a python package manager

Prerequisites:
   - Machine should have Python 2.6 or greater version
   - Ansible supports only Linux/Unix/Mac OS
   - It won't support windows

Ansible Architecture:
    - Playbooks to cooridate multiple tasks
    - Python to build the execution
    - SSH to deliver the tasks

            
     
Installation:
   - ansible has to be insatlled on CM
   - Python should run on nodes
   - Public key has to be shared with nodes to make ssh connection
   - apt-get install ansible
    
Playbook:
   - It's simple YAML format file
   - extention of the file is yml
   - There are different modules in ansible
   - Playbook starts with "---" line
   - "Hosts" can group the servers
   - To run playbook : anisble-playbook $name.yml
  
Roles, Tasks, Modules, Handlers:

Playbooks contain Plays, we sometimes refer to the files that contain plays as playbook, it is also the 'list of plays that i'm currently running'.

Plays map hosts to tasks.

Tasks perform an action (this action is normally a module).

A module is a plugin/script that follows certain Ansible input/output specs
Modules can be written in any language, Ansible only ships with python and powershell modules.

Roles are 'reusable subsets of a play', mainly they group tasks and resources to accomplish a certain goal, they have no host mapping and require being in a play. 
You don't really need to use these to start, they are just a way of organizing, reusing and sharing.

There are more plugins and other stuff you'll learn as you start dealing with more complex issues.


- ansible-playbook --syntax-check : this checks the syntax of a playbook
- ansible-playbook playbook.yml --list-hosts : To check list of hosts affected by a playbook


------------------------------------------------
inventory file
-------------------------
web1 ansible_ssh_host=10.43.19.10
db1 ansible_ssh_host=10.0.0.255

[webservers]
web1

[dbservers]
db1

[datacentre:children]
webservers
dbservers

[datacentre:vars]
ansible_ssh_user=root
ansible_ssh_pass=root

-----------------
Modules:
- anisble-doc -l : it will list the all modules available in ansible
- ansible-doc <name> : it gives the full details of particular module

working with modules:
 - ansible webser -i inventory -m apt -a "name=apache2 state=present"
 - ansible webser -i inventory -m apt -a "name=apache2 state=present" --sudo
 - ansible webser -i inventory -m service -a "name=apache2 enabled=yes state=started"


example:
---
- hosts: webser
  sudo: yes

  tasks:
  - name: installing apache
    apt: name=apache2 state=present

  - name: start the service
    service: name=apache2 enabled=yes state=started

- hosts: dbser
  sudo: yes

  - name: install my-sql server
    apt: name=mysql-server state=present


-----------------------------
to retry any ansible file to run only the failed steps

-- ansible-playbook playbook.yml --list @/etc/ansible/playbook.yml.retry

to include other playbooks or to call different playbooks

---
hosts: all
- include: playbook.yml

--------------
Prompting for input(Dynamic Plays):
- hosts: web1
  vars_prompt:
   - name: "sitename"
    prompt: "what is new sitename?"

  tasks:
  - debug: msg the new sitename is {{sitename}}"

-----------------------
Playbook Handlers:
we inform the handler execute the task when the state of the configuration(or any other actions) has changed

---
 - hosts: webservers
   tasks:
   - copy: src=files/httpd.conf
           dest=/etc/httpd/conf/
     notify:
      - apache restart
    handlers:
    - service: name=httpd state=restart

------------------
conditional execution(when):

---
- hosts: webservers
  tasks:
  -yum: name=httpd state=present
   when: ansible_os_family == "RedHat"

------------------------------------------
Bit Complex Playbook:

- hosts: webser
  sudo: yes
  vars:
   http_port: 80
   doc_dir: /ansible/
   doc_root: /var/www/html/ansible/
   max_clients: 5


  var_prompt:
   - name: username
     prompt: what is your name?what is your favourite color?

  tasks:
  - name: installing apache
    yum: name=httpd state=present
    when: ansible_os_family == "RedHat"

  - name: start the service
    service: name=httpd state=restarted

  - name: Deploy configuration file
    template: src=templates/httpd.j2 dest=/etc/httpd/conf/httpd.conf
    notify:
    - Restart Apache

  - name: Copy site files
    template: src=templates/index.j2 dest={{ doc_root }}/index.html

   handlers:
   - name: Restart Apache
     service: name=httpd state=restarted

----------------------------------------------------------
Roles:

- Create a directory roles under where ansible installed
example: under roles directory create webserver and dbserver directories
- under webserver directory create vars, tasks, handler, templates etc
- tree command gives u the directory structure
- Under vars, tasks, handlers create main.yml files and put necessary content







webserver.yml
---
- hosts: webservers
  sudo: yes
  gather_facts: no
  roles:
  - webserver













